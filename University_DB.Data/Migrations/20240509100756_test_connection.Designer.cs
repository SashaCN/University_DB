// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University_DB.Data;

#nullable disable

namespace University_DB.Data.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20240509100756_test_connection")]
    partial class test_connection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SpecializationSubject", b =>
                {
                    b.Property<Guid>("SpecializationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SpecializationsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("SpecailizationSubject", (string)null);
                });

            modelBuilder.Entity("SpecializationTeacher", b =>
                {
                    b.Property<Guid>("SpecializationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("SpecializationsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("TeacherSpecialization", (string)null);
                });

            modelBuilder.Entity("University_DB.Data.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("University_DB.Data.Models.Exam", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.Property<Guid>("Journal_id")
                        .HasColumnType("char(36)");

                    b.Property<double>("Mark")
                        .HasColumnType("double");

                    b.Property<Guid>("Subject_id")
                        .HasColumnType("char(36)");

                    b.HasIndex("Journal_id");

                    b.HasIndex("Subject_id")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Exam");
                });

            modelBuilder.Entity("University_DB.Data.Models.Journal", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.HasDiscriminator().HasValue("Journal");
                });

            modelBuilder.Entity("University_DB.Data.Models.Specialization", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Specialization");
                });

            modelBuilder.Entity("University_DB.Data.Models.Student", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SpecializationlId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.HasIndex("JournalId")
                        .IsUnique();

                    b.HasIndex("SpecializationlId");

                    b.ToTable("Entity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Student_Name");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("University_DB.Data.Models.Subject", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Entity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Subject_Name");
                        });

                    b.HasDiscriminator().HasValue("Subject");
                });

            modelBuilder.Entity("University_DB.Data.Models.Teacher", b =>
                {
                    b.HasBaseType("University_DB.Data.Models.Entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext");

                    b.ToTable("Entity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Teacher_Name");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("SpecializationSubject", b =>
                {
                    b.HasOne("University_DB.Data.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB.Data.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpecializationTeacher", b =>
                {
                    b.HasOne("University_DB.Data.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB.Data.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("University_DB.Data.Models.Exam", b =>
                {
                    b.HasOne("University_DB.Data.Models.Journal", "Journal")
                        .WithMany("Exams")
                        .HasForeignKey("Journal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB.Data.Models.Subject", "Subject")
                        .WithOne("Exam")
                        .HasForeignKey("University_DB.Data.Models.Exam", "Subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University_DB.Data.Models.Student", b =>
                {
                    b.HasOne("University_DB.Data.Models.Journal", "Journal")
                        .WithOne("Student")
                        .HasForeignKey("University_DB.Data.Models.Student", "JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB.Data.Models.Specialization", "Specialization")
                        .WithMany("Student")
                        .HasForeignKey("SpecializationlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("University_DB.Data.Models.Journal", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("University_DB.Data.Models.Specialization", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("University_DB.Data.Models.Subject", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
